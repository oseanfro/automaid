/**************************************************************************//**
 * @file cdf24.c
 * @version 0.99
 * @date jeu. mai 14 00:37:45 CEST 2009
 *
 * @author jf.argentino@osean.fr
 * @brief 
 *
 * history: 
 *          -0.99: initial release
 ******************************************************************************/

#include "cdf24.h"
#include "long_ops.h"

#ifdef DBG_CDF24
   #ifdef MERMAID_ECOS_BUILD
   #include "../Message.h"
   #define DBG_PRINT(x, ...) write_DBG("CDF24", __LINE__, x , ##__VA_ARGS__);
   #else /* MERMAID_ECOS_BUILD not defined */
   #define DBG_PRINT(x, ...) printf("CDF24 %d: " x "\n", __LINE__,\
                                    ##__VA_ARGS__);
   #endif /* MERMAID_ECOS_BUILD */
#else
   #define DBG_PRINT(x, ...)
#endif

int32_t _a[CDF24_MAX_LENGTH >> 1], _d[CDF24_MAX_LENGTH >> 1];

/******************************************************************************
 * TODO renaming constants, we have
 * TODO    - Pa = [1 1] / 2
 * TODO    - Ua = [-3 19 19 -3] / 64
 * TODO    - Kp = SQRT (2)
 * TODO    - Ku = 1 / SQRT (2)
 ******************************************************************************/
/*
 * SQRT(2) = 665857 / 470832 = 577 / 408 = 239 / 169 = 99 / 70 = 41 / 29 ...
 */
static const int32_t SQRT2_NUM = 239L;
static const int32_t SQRT2_DEN = 169L;
static const int32_t A = 3L;
static const int32_t B = 19L;
static const int32_t C = 64L;

#ifdef LONG_OPS_PARANOID
static void normalized_cdf24 (int32_t* x, size_t lx, size_t K) {
   size_t k, n, m;
   DBG_PRINT ("normalized panaroid on %zu@%p", lx, (void*) x);
   LONG_OPS_OVERFLOW_RESET ();
   for (k = 0UL; k < K; k++) {
      DBG_PRINT ("round %zu on %zu", k, K - 1U);
      lx >>= 1;
      /* Detail part */
      for (n = 1UL; n < lx; n++) {
         m = (n << 1) - 1UL;
         if (UNLIKELY (add_will_overflow (x[m-1UL], x[m+1UL]))) { 
            x[m] -= x[m-1UL] / 2L + x[m+1UL] / 2L;
         } else {
            x[m] -= (x[m-1UL] + x[m+1UL]) / 2L;
         }
         _d[n-1] = long_mult_and_div (x[m], SQRT2_DEN, SQRT2_NUM);
      }
      _d[lx-1] = long_mult_and_div (x[(lx<<1) - 1], SQRT2_DEN, SQRT2_NUM);
      /* Approximation part */
      _a[0] = long_mult_and_div (x[0], SQRT2_NUM, SQRT2_DEN);
      _a[1] = long_mult_and_div (x[2], SQRT2_NUM, SQRT2_DEN);
      for (n = 2UL; n < lx - 1UL; n ++) {
         m = n << 1;
         if (UNLIKELY (add_will_overflow (x[m-3UL], x[m+3UL]))) {
            x[m] -= long_mult_and_div (x[m-3UL], A, C)
                        + long_mult_and_div (x[m+3UL], A, C);
         } else {
            x[m] -= long_mult_and_div (x[m-3UL] + x[m+3UL], A, C);
         }
         if (UNLIKELY (add_will_overflow (x[m-1UL], x[m+1UL]))) {
            x[m] += long_mult_and_div (x[m-1UL], B, C)
                        + long_mult_and_div (x[m+1UL], B, C);
         } else {
            x[m] += long_mult_and_div (x[m-1UL] + x[m+1UL], B, C);
         }
         _a[n] = long_mult_and_div (x[m], SQRT2_NUM, SQRT2_DEN);
      }
      _a[lx-2] = long_mult_and_div (x[(lx<<1) - 4], SQRT2_NUM, SQRT2_DEN);
      _a[lx-1] = long_mult_and_div (x[(lx<<1) - 2], SQRT2_NUM, SQRT2_DEN);
      /* Resort */
      for (n = 0; n < lx; n++) {
         x[n] = _a[n];
         x[lx + n] = _d[n];
      }
   }
}

static void unnormalized_cdf24 (int32_t* x, size_t lx, size_t K) {
   size_t k, n, m;
   DBG_PRINT ("unnormalized panaroid on %zu@%p", lx, (void*) x);
   LONG_OPS_OVERFLOW_RESET ();
   for (k = 0UL; k < K; k++) {
      DBG_PRINT ("round %zu on %zu", k, K - 1U);
      lx >>= 1;
      /* Detail part */
      for (n = 1UL; n < lx; n++) {
         m = (n << 1) - 1UL;
         if (UNLIKELY (add_will_overflow (x[m-1UL], x[m+1UL]))) { 
            x[m] -= x[m-1UL] / 2L + x[m+1UL] / 2L;
         } else {
            x[m] -= (x[m-1UL] + x[m+1UL]) / 2L;
         }
         _d[n-1] = x[m];
      }
      _d[lx-1] = x[(lx<<1) - 1];
      /* Approximation part */
      _a[0] = x[0];
      _a[1] = x[2];
      for (n = 2UL; n < lx - 1UL; n ++) {
         m = n << 1;
         if (UNLIKELY (add_will_overflow (x[m-3UL], x[m+3UL]))) {
            x[m] -= long_mult_and_div (x[m-3UL], A, C)
                        + long_mult_and_div (x[m+3UL], A, C);
         } else {
            x[m] -= long_mult_and_div (x[m-3UL] + x[m+3UL], A, C);
         }
         if (UNLIKELY (add_will_overflow (x[m-1UL], x[m+1UL]))) {
            x[m] += long_mult_and_div (x[m-1UL], B, C)
                        + long_mult_and_div (x[m+1UL], B, C);
         } else {
            x[m] += long_mult_and_div (x[m-1UL] + x[m+1UL], B, C);
         }
         _a[n] = x[m];
      }
      _a[lx-2] = x[(lx<<1) - 4];
      _a[lx-1] = x[(lx<<1) - 2];
      /* Resort */
      for (n = 0; n < lx; n++) {
         x[n] = _a[n];
         x[lx + n] = _d[n];
      }
   }
}

#else

static void normalized_cdf24 (int32_t* x, size_t lx, size_t K) {
   size_t k, n, m;
   DBG_PRINT ("normalized on %zu@%p", lx, (void*) x);
   for (k = 0UL; k < K; k++) {
      DBG_PRINT ("round %zu on %zu", k, K - 1U);
      lx >>= 1;
      /* Detail part */
      for (n = 1UL; n < lx; n++) {
         m = (n << 1) - 1UL;
         x[m] -= (x[m-1UL] + x[m+1UL]) / 2L;
         _d[n-1] = long_mult_and_div (x[m], SQRT2_DEN, SQRT2_NUM);
      }
      _d[lx-1] = long_mult_and_div (x[(lx<<1) - 1], SQRT2_DEN, SQRT2_NUM);
      /* Approximation part */
      _a[0] = long_mult_and_div (x[0], SQRT2_NUM, SQRT2_DEN);
      _a[1] = long_mult_and_div (x[2], SQRT2_NUM, SQRT2_DEN);
      for (n = 2UL; n < lx - 1UL; n ++) {
         m = n << 1;
         x[m] -= long_mult_and_div (x[m-3UL] + x[m+3UL], A, C);
         x[m] += long_mult_and_div (x[m-1UL] + x[m+1UL], B, C);
         _a[n] = long_mult_and_div (x[m], SQRT2_NUM, SQRT2_DEN);
      }
      _a[lx-2] = long_mult_and_div (x[(lx<<1) - 4], SQRT2_NUM, SQRT2_DEN);
      _a[lx-1] = long_mult_and_div (x[(lx<<1) - 2], SQRT2_NUM, SQRT2_DEN);
      /* Resort */
      for (n = 0; n < lx; n++) {
         x[n] = _a[n];
         x[lx + n] = _d[n];
      }
   }
}

static void unnormalized_cdf24 (int32_t* x, size_t lx, size_t K) {
   size_t k, n, m;
   DBG_PRINT ("unnormalized on %zu@%p", lx, (void*) x);
   for (k = 0UL; k < K; k++) {
      DBG_PRINT ("round %zu on %zu", k, K - 1U);
      lx >>= 1;
      /* Detail part */
      for (n = 1UL; n < lx; n++) {
         m = (n << 1) - 1UL;
         x[m] -= (x[m-1UL] + x[m+1UL]) / 2L;
         _d[n-1] = x[m];
      }
      _d[lx-1] = x[(lx<<1) - 1];
      /* Approximation part */
      _a[0] = x[0];
      _a[1] = x[2];
      for (n = 2UL; n < lx - 1UL; n ++) {
         m = n << 1;
         x[m] -= long_mult_and_div (x[m-3UL] + x[m+3UL], A, C);
         x[m] += long_mult_and_div (x[m-1UL] + x[m+1UL], B, C);
         _a[n] = x[m];
      }
      _a[lx-2] = x[(lx<<1) - 4];
      _a[lx-1] = x[(lx<<1) - 2];
      /* Resort */
      for (n = 0; n < lx; n++) {
         x[n] = _a[n];
         x[lx + n] = _d[n];
      }
   }
}

#endif

int cdf24 (int32_t* x, size_t lx, size_t K, int normalized) {
   DBG_PRINT ("temp buffers %jd @ %p and %p",
              (intmax_t)(CDF24_MAX_LENGTH >> 1), (void*)_a, (void*)_d);
   if (lx > CDF24_MAX_LENGTH) {
       DBG_PRINT ("length %zu exceed max allowed of %d", lx, CDF24_MAX_LENGTH);
       return -1;
   }
   if (lx % (1UL << K)) {
       DBG_PRINT ("length %zu is not a %ju multiple", lx, (1UL << K));
       return -1;
   }
   if (normalized) normalized_cdf24 (x, lx, K);
   else unnormalized_cdf24 (x, lx, K);
   return 0;
}

